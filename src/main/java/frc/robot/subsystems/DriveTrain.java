// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;


import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.SPI;

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftMotor1;
private CANSparkMax leftMotor2;
private MotorControllerGroup rightMotorController;
private CANSparkMax rightMotor1;
private CANSparkMax rightMotor2;
private MotorControllerGroup leftMotorController;
private DifferentialDrive differentialDrive1;
private RelativeEncoder m_leftMotor1_Encoder;
private double m_Drivetrain_Gear_ratio = 10;
private double m_Wheel_Diameter = 6.0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final SPI.Port kGyroPort = SPI.Port.kOnboardCS0;
    private static final double kVoltsPerDegreePerSecond = 0.0128;
    private ADXRS450_Gyro m_gyro;
    /**
    *
    */
    public DriveTrain() {
        m_gyro = new ADXRS450_Gyro(kGyroPort);
        m_gyro.calibrate();
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftMotor1 = new CANSparkMax(1, MotorType.kBrushless);
 
 leftMotor1.restoreFactoryDefaults();  
leftMotor1.setInverted(false);
leftMotor1.setIdleMode(IdleMode.kCoast);
  
m_leftMotor1_Encoder = leftMotor1.getEncoder();

leftMotor2 = new CANSparkMax(2, MotorType.kBrushless);
 
 leftMotor2.restoreFactoryDefaults();  
leftMotor2.setInverted(false);
leftMotor2.setIdleMode(IdleMode.kCoast);
  

rightMotorController = new MotorControllerGroup(leftMotor1, leftMotor2  );
 addChild("RightMotorController",rightMotorController);
 

rightMotor1 = new CANSparkMax(3, MotorType.kBrushless);
 
 rightMotor1.restoreFactoryDefaults();  
rightMotor1.setInverted(true);
rightMotor1.setIdleMode(IdleMode.kCoast);
  

rightMotor2 = new CANSparkMax(4, MotorType.kBrushless);
 
 rightMotor2.restoreFactoryDefaults();  
rightMotor2.setInverted(true);
rightMotor2.setIdleMode(IdleMode.kCoast);
  

leftMotorController = new MotorControllerGroup(rightMotor1, rightMotor2  );
 addChild("LeftMotorController",leftMotorController);
 

differentialDrive1 = new DifferentialDrive(leftMotorController, rightMotorController);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Lefr Drive Revs", my_Get_Left_Encoder_Revs());
        SmartDashboard.putNumber("Gyro", my_get_Gyro_Angle());
        
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
        public void my_drivercade(double xSpeed, double zRotation) {
            differentialDrive1.arcadeDrive(xSpeed, zRotation);
}
    //Add an encoder
    private double my_Get_Left_Encoder_Revs(){
        return m_leftMotor1_Encoder.getPosition();
    }

    public void my_reset_Encoder(){
        m_leftMotor1_Encoder.setPosition(0.0);
    }

    public double my_get_Left_Encoder_Inchs(){
        return my_Get_Left_Encoder_Revs()/m_Drivetrain_Gear_ratio *( m_Wheel_Diameter * Math.PI );
    }

    public double my_get_Gyro_Angle(){
        return m_gyro.getAngle();
    }

    public void my_reSet_Gyro(){
        m_gyro.reset();
    }
}

