// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import java.util.function.DoubleSupplier;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.ShootBall;
import oi.limelightvision.limelight.frc.LimeLight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class SpinFlywheels extends CommandBase {

    private boolean debug = true;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final ShootBall m_shootBall;
        private LimeLight m_limeLight;
        private int m_pipeLine;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public SpinFlywheels(int pipline, ShootBall subsystem, LimeLight limeLight) {

    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
       
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_shootBall = subsystem;
        m_limeLight = limeLight;
        m_pipeLine = pipline;
        addRequirements(m_shootBall);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }
    /*BackSpin
    UPPER = -0.0043 * m_limeLight.getdegVerticalToTarget() + 0.282
    LOWER = -0.0164 * m_limeLight.getdegVerticalToTarget() + 0.838
      FrontSpin
    UPPER = -0.0138 * m_limeLight.getdegVerticalToTarget() + 0.816
    LOWER = -0.00347 * m_limeLight.getdegVerticalToTarget() + 0.341
    */

    //- Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double  m_upperPercent = (-0.0538 * m_limeLight.getdegVerticalToTarget() + 0.816);
        double m_lowerPercent = (-0.00347 * m_limeLight.getdegVerticalToTarget() + 0.341);
        if(debug){
        SmartDashboard.putNumber("m_upperPercnet", m_upperPercent);
        SmartDashboard.putNumber("m_lowerPercnet", m_lowerPercent);
        }
        m_shootBall.mymotorrunL(m_lowerPercent);
        m_shootBall.mymotorrunH(m_upperPercent);


    }
 
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_shootBall.mymotorrunH(0);
        m_shootBall.mymotorrunL(0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
