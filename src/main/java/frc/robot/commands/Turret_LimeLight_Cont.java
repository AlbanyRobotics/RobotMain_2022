// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;

import javax.print.attribute.standard.Finishings;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;

import frc.robot.subsystems.TurretCon;
import oi.limelightvision.limelight.frc.LimeLight;

public class Turret_LimeLight_Cont extends CommandBase {

  private final TurretCon m_turretCon;
  private LimeLight m_limeLight;
  private int m_pipeLine;
 
  /** Creates a new Turret_LimeLight_Cont. */
  public Turret_LimeLight_Cont(int pipline, LimeLight limeLight, TurretCon subsystem) {
    // Use addRequirements() here to declare subsystem dependencies.
    m_pipeLine = pipline;
    m_limeLight = limeLight;
    m_turretCon = subsystem;
    addRequirements(m_turretCon);

  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    m_limeLight.setPipeline(m_pipeLine);
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    double kp = SmartDashboard.getNumber("Kp", 1.0);
    double rpm = m_limeLight.getdegRotationToTarget() * kp;
    SmartDashboard.putNumber("Command RPM", rpm);
    if(m_limeLight.getIsTargetFound()){
      m_turretCon.mymotorVelocity(rpm);
    }else{
      m_turretCon.mymotorVelocity(0.0);
    } 
    

  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
    m_limeLight.setPipeline(0);
    m_turretCon.mymotorVelocity(0.0);
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }

  @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return true;
    }
}
