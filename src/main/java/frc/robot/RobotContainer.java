// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.util.XboxControllerAxisButton;
import frc.robot.util.XboxPOVButton;
import oi.limelightvision.limelight.frc.LimeLight;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final BallSurvey m_ballSurvey = new BallSurvey();
    public final TurretCon m_turretCon = new TurretCon();
    public final ShootBall m_shootBall = new ShootBall();
    public final IntakeArm m_intakeArm = new IntakeArm();
    public final IntakeSpin m_intakeSpin = new IntakeSpin();
    public final DriveTrain m_driveTrain = new DriveTrain();
    public final LiftArmLeft m_liftArmLeft = new LiftArmLeft();
    public final LiftArmRight m_liftArmRight = new LiftArmRight();

// Joysticks
private final XboxController DriveController = new XboxController(0);
private final XboxController LiftController = new XboxController(1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final LimeLight m_limeLight = new LimeLight();

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_ballSurvey);
    SmartDashboard.putData(m_turretCon);
    SmartDashboard.putData(m_shootBall);
    SmartDashboard.putData(m_intakeArm);
    SmartDashboard.putData(m_intakeSpin);
    SmartDashboard.putData(m_driveTrain);


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("IntakeArmUpDown", new IntakeArmUp( m_intakeArm ));
    SmartDashboard.putData("IntakeSpinning", new IntakeSpinning( m_intakeSpin ));
    SmartDashboard.putData("SpinFlywheels", new SpinFlywheels(() ->.75, () -> .5, m_shootBall ));
    SmartDashboard.putData("Rotate Right", new RotateRight( m_turretCon ));
    SmartDashboard.putData("Rotate Left", new RotateLeft( m_turretCon ));
    SmartDashboard.putData("Survey", new Survey( m_ballSurvey ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    SmartDashboard.putData("Drive 5 rotrations", new Drive_For_Distance(5, () -> 0.5, () -> 0.0, m_driveTrain));
    SmartDashboard.putData("LimeLight Turt Tracking", new Turret_LimeLight_Cont(1, m_limeLight, m_turretCon));
    SmartDashboard.putNumber("Kp", 4.5);
    SmartDashboard.putNumber("Upper Percent", .75);
    SmartDashboard.putNumber("Lower Percent", .5);
    // Configure the button bindings

    configureButtonBindings();

    // Configure default commands
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    //m_driveTrain.setDefaultCommand(new DriveWithJoysticks(0, 0, m_driveTrain) );


    // _END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand (new DriveWithJoysticks (() -> -DriveController.getRawAxis(1), () -> -DriveController.getRawAxis(4), m_driveTrain ));
    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Auto Basic Shoot and Drive", new Auto_basic_Shoot_Drive(m_shootBall, m_ballSurvey, m_driveTrain));
    m_chooser.addOption("name", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
//Driver Buttons
    final XboxControllerAxisButton rightTrigger = new XboxControllerAxisButton(DriveController, XboxController.Axis.kRightTrigger.value);        
rightTrigger.whileHeld(new SpinFlywheels(() -> SmartDashboard.getNumber("Upper Percent", .75), () -> SmartDashboard.getNumber("Lower Percent", .5), m_shootBall ) ,true);
    SmartDashboard.putData("rightTrigger",new SpinFlywheels(() -> SmartDashboard.getNumber("Upper Percent", .75), () -> SmartDashboard.getNumber("Lower Percent", .5), m_shootBall ) );
    
    final XboxControllerAxisButton leftTrigger = new XboxControllerAxisButton(DriveController, XboxController.Axis.kLeftTrigger.value);        
leftTrigger.whileHeld(new IntakeSpinning( m_intakeSpin ) ,true);
        SmartDashboard.putData("leftTrigger",new IntakeSpinning( m_intakeSpin ) );
 
final XboxPOVButton DpadRight = new XboxPOVButton(DriveController, XboxPOVButton.EAST);
DpadRight.whileHeld(new FlywheelReverse ( m_shootBall ) ,true);

final XboxPOVButton DpadUp = new XboxPOVButton(DriveController, XboxPOVButton.NORTH);
DpadUp.whileHeld(new SurveyReverse ( m_ballSurvey ) ,true);

final JoystickButton xButton = new JoystickButton(DriveController, XboxController.Button.kX.value);
xButton.whileHeld(new IntakeReverse ( m_intakeSpin ) ,true);

final JoystickButton bButton = new JoystickButton(DriveController, XboxController.Button.kB.value);
bButton.whileHeld(new IntakeArmDown( m_intakeArm ) ,true);

final JoystickButton aButton = new JoystickButton(DriveController, XboxController.Button.kA.value);
aButton.whenPressed(new Turret_LimeLight_Cont( 1, m_limeLight, m_turretCon ) ,true);
//Turret_LimeLight_Cont(int pipline, LimeLight limeLight, TurretCon subsystem)
   
final JoystickButton rightBumper = new JoystickButton(DriveController, XboxController.Button.kRightBumper.value);        
rightBumper.whileHeld(new Survey( m_ballSurvey ) ,true);
  
final JoystickButton start = new JoystickButton(DriveController, XboxController.Button.kStart.value);        
start.whileHeld(new RotateRight( m_turretCon ) ,true);

final JoystickButton back = new JoystickButton(DriveController, XboxController.Button.kBack.value);        
back.whileHeld(new RotateLeft( m_turretCon ) ,true);
  
final JoystickButton leftBumper = new JoystickButton(DriveController, XboxController.Button.kLeftBumper.value);        
leftBumper.whileHeld(new IntakeArmUp( m_intakeArm ) ,true);
//Lift Controller Buttons

final XboxPOVButton DpadupL = new XboxPOVButton(LiftController, XboxPOVButton.NORTH);
DpadupL.whileHeld(new LiftArmLeftUp( m_liftArmLeft ) ,true);

final XboxPOVButton DpaddownL = new XboxPOVButton(LiftController, XboxPOVButton.SOUTH);
DpaddownL.whileHeld(new LiftArmLeftDown( m_liftArmLeft ) ,true);

final JoystickButton AButton = new JoystickButton(LiftController, XboxController.Button.kA.value);
AButton.whileHeld(new LiftArmRightDown( m_liftArmRight ) ,true);

final JoystickButton YButton = new JoystickButton(LiftController, XboxController.Button.kY.value);
YButton.whileHeld(new LiftArmRightUp( m_liftArmRight ) ,true);

//final XboxPOVButton Dpaddown = new XboxPOVButton(DriveController, XboxPOVButton.SOUTH);
//Dpaddown.whileHeld(new LiftArmUp( m_liftArm ) ,true);

//final XboxPOVButton Dpadright = new XboxPOVButton(DriveController, XboxPOVButton.WEST);
//Dpadright.whileHeld(new LiftArmDown( m_liftArm ) ,true);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriveController() {
      return DriveController;
    }
//Changed from, public XboxController get XboxController1() {

public XboxController getLiftController() {
        return LiftController;
      }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

