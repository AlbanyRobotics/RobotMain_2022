// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;

import java.util.function.DoubleSupplier;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DriveTrain;

public class Drive_For_Distance extends CommandBase {

  private final DriveTrain m_driveTrain;
  private DoubleSupplier m_CommandSpeed;
  private DoubleSupplier m_CommandTurn;
  private double m_distance;

  /** Creates a new Drive_For_Distance. */
  public Drive_For_Distance(double distance, DoubleSupplier CommandSpeed, DoubleSupplier CommandTurn, DriveTrain subsystem) {
    // Use addRequirements() here to declare subsystem dependencies.
    m_distance = distance;
    m_CommandSpeed = CommandSpeed;
    m_CommandTurn = CommandTurn;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    m_driveTrain = subsystem;
    addRequirements(m_driveTrain);
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    m_driveTrain.my_reset_Encoder();
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    double xSpeed = m_CommandSpeed.getAsDouble();
    double zRotation = m_CommandTurn.getAsDouble();
    m_driveTrain.my_drivercade(xSpeed, zRotation);
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
    m_driveTrain.my_drivercade(0,0);
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return Math.abs( m_driveTrain.my_get_Left_Encoder_Inchs()) >= m_distance;
  }
}
